
SSD1306 LED Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000400  00800124  00800124  00000818  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed6  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2b  00000000  00000000  000028b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001567  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00004b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000088e3  00000000  00000000  00004dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001212  00000000  00000000  0000d6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e6d  00000000  00000000  0000ec01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c0 01 	jmp	0x380	; 0x380 <__ctors_end>
   4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
   8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
   c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  10:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  14:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  18:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  1c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  20:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  24:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  28:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  2c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  30:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  38:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  3c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  40:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  44:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  48:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  4c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  50:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  54:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  58:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  5c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  60:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  64:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	ff ff       	.word	0xffff	; ????
  70:	ff ff       	.word	0xffff	; ????
  72:	ff ff       	.word	0xffff	; ????
  74:	ff ff       	.word	0xffff	; ????
  76:	ff ff       	.word	0xffff	; ????
  78:	ff ff       	.word	0xffff	; ????
  7a:	ff ff       	.word	0xffff	; ????
  7c:	ff ff       	.word	0xffff	; ????
  7e:	ff ff       	.word	0xffff	; ????
  80:	ff ff       	.word	0xffff	; ????
  82:	ff ff       	.word	0xffff	; ????
  84:	ff ff       	.word	0xffff	; ????
  86:	ff ff       	.word	0xffff	; ????
  88:	ff ff       	.word	0xffff	; ????
  8a:	ff ff       	.word	0xffff	; ????
  8c:	ff ff       	.word	0xffff	; ????
  8e:	ff ff       	.word	0xffff	; ????
  90:	ff ff       	.word	0xffff	; ????
  92:	ff ff       	.word	0xffff	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	ff ff       	.word	0xffff	; ????
  9a:	ff ff       	.word	0xffff	; ????
  9c:	ff ff       	.word	0xffff	; ????
  9e:	ff ff       	.word	0xffff	; ????
  a0:	ff ff       	.word	0xffff	; ????
  a2:	ff ff       	.word	0xffff	; ????
  a4:	ff ff       	.word	0xffff	; ????
  a6:	ff ff       	.word	0xffff	; ????
  a8:	ff ff       	.word	0xffff	; ????
  aa:	ff ff       	.word	0xffff	; ????
  ac:	ff ff       	.word	0xffff	; ????
  ae:	ff ff       	.word	0xffff	; ????
  b0:	ff ff       	.word	0xffff	; ????
  b2:	ff ff       	.word	0xffff	; ????
  b4:	ff ff       	.word	0xffff	; ????
  b6:	ff ff       	.word	0xffff	; ????
  b8:	ff ff       	.word	0xffff	; ????
  ba:	ff ff       	.word	0xffff	; ????
  bc:	ff ff       	.word	0xffff	; ????
  be:	ff ff       	.word	0xffff	; ????
  c0:	ff ff       	.word	0xffff	; ????
  c2:	ff ff       	.word	0xffff	; ????
  c4:	ff ff       	.word	0xffff	; ????
  c6:	ff ff       	.word	0xffff	; ????
  c8:	ff ff       	.word	0xffff	; ????
  ca:	ff ff       	.word	0xffff	; ????
  cc:	ff ff       	.word	0xffff	; ????
  ce:	ff ff       	.word	0xffff	; ????
  d0:	ff ff       	.word	0xffff	; ????
  d2:	ff ff       	.word	0xffff	; ????
  d4:	ff ff       	.word	0xffff	; ????
  d6:	ff ff       	.word	0xffff	; ????
  d8:	ff ff       	.word	0xffff	; ????
  da:	ff ff       	.word	0xffff	; ????
  dc:	ff ff       	.word	0xffff	; ????
  de:	ff ff       	.word	0xffff	; ????
  e0:	ff ff       	.word	0xffff	; ????
  e2:	ff ff       	.word	0xffff	; ????
  e4:	ff ff       	.word	0xffff	; ????
  e6:	ff ff       	.word	0xffff	; ????
  e8:	ff ff       	.word	0xffff	; ????
  ea:	ff ff       	.word	0xffff	; ????
  ec:	ff ff       	.word	0xffff	; ????
  ee:	ff ff       	.word	0xffff	; ????
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff ff       	.word	0xffff	; ????
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff ff       	.word	0xffff	; ????
  f8:	ff ff       	.word	0xffff	; ????
  fa:	ff ff       	.word	0xffff	; ????
  fc:	ff ff       	.word	0xffff	; ????
  fe:	ff ff       	.word	0xffff	; ????
 100:	ff ff       	.word	0xffff	; ????
 102:	ff ff       	.word	0xffff	; ????
 104:	ff ff       	.word	0xffff	; ????
 106:	ff ff       	.word	0xffff	; ????
 108:	ff ff       	.word	0xffff	; ????
 10a:	ff ff       	.word	0xffff	; ????
 10c:	ff ff       	.word	0xffff	; ????
 10e:	ff ff       	.word	0xffff	; ????
 110:	ff ff       	.word	0xffff	; ????
 112:	ff ff       	.word	0xffff	; ????
 114:	ff ff       	.word	0xffff	; ????
 116:	ff ff       	.word	0xffff	; ????
 118:	ff ff       	.word	0xffff	; ????
 11a:	ff ff       	.word	0xffff	; ????
 11c:	ff ff       	.word	0xffff	; ????
 11e:	ff ff       	.word	0xffff	; ????
 120:	ff ff       	.word	0xffff	; ????
 122:	ff ff       	.word	0xffff	; ????
 124:	ff ff       	.word	0xffff	; ????
 126:	ff ff       	.word	0xffff	; ????
	...
 130:	00 2f       	mov	r16, r16
 132:	00 00       	nop
 134:	00 00       	nop
 136:	07 00       	.word	0x0007	; ????
 138:	07 00       	.word	0x0007	; ????
 13a:	00 14       	cp	r0, r0
 13c:	7f 14       	cp	r7, r15
 13e:	7f 14       	cp	r7, r15
 140:	00 24       	eor	r0, r0
 142:	2a 7f       	andi	r18, 0xFA	; 250
 144:	2a 12       	cpse	r2, r26
 146:	00 62       	ori	r16, 0x20	; 32
 148:	64 08       	sbc	r6, r4
 14a:	13 23       	and	r17, r19
 14c:	00 36       	cpi	r16, 0x60	; 96
 14e:	49 55       	subi	r20, 0x59	; 89
 150:	22 50       	subi	r18, 0x02	; 2
 152:	00 00       	nop
 154:	05 03       	mulsu	r16, r21
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	1c 22       	and	r1, r28
 15c:	41 00       	.word	0x0041	; ????
 15e:	00 00       	nop
 160:	41 22       	and	r4, r17
 162:	1c 00       	.word	0x001c	; ????
 164:	00 14       	cp	r0, r0
 166:	08 3e       	cpi	r16, 0xE8	; 232
 168:	08 14       	cp	r0, r8
 16a:	00 08       	sbc	r0, r0
 16c:	08 3e       	cpi	r16, 0xE8	; 232
 16e:	08 08       	sbc	r0, r8
 170:	00 00       	nop
 172:	00 a0       	ldd	r0, Z+32	; 0x20
 174:	60 00       	.word	0x0060	; ????
 176:	00 08       	sbc	r0, r0
 178:	08 08       	sbc	r0, r8
 17a:	08 08       	sbc	r0, r8
 17c:	00 00       	nop
 17e:	60 60       	ori	r22, 0x00	; 0
 180:	00 00       	nop
 182:	00 20       	and	r0, r0
 184:	10 08       	sbc	r1, r0
 186:	04 02       	muls	r16, r20
 188:	00 3e       	cpi	r16, 0xE0	; 224
 18a:	51 49       	sbci	r21, 0x91	; 145
 18c:	45 3e       	cpi	r20, 0xE5	; 229
 18e:	00 00       	nop
 190:	42 7f       	andi	r20, 0xF2	; 242
 192:	40 00       	.word	0x0040	; ????
 194:	00 42       	sbci	r16, 0x20	; 32
 196:	61 51       	subi	r22, 0x11	; 17
 198:	49 46       	sbci	r20, 0x69	; 105
 19a:	00 21       	and	r16, r0
 19c:	41 45       	sbci	r20, 0x51	; 81
 19e:	4b 31       	cpi	r20, 0x1B	; 27
 1a0:	00 18       	sub	r0, r0
 1a2:	14 12       	cpse	r1, r20
 1a4:	7f 10       	cpse	r7, r15
 1a6:	00 27       	eor	r16, r16
 1a8:	45 45       	sbci	r20, 0x55	; 85
 1aa:	45 39       	cpi	r20, 0x95	; 149
 1ac:	00 3c       	cpi	r16, 0xC0	; 192
 1ae:	4a 49       	sbci	r20, 0x9A	; 154
 1b0:	49 30       	cpi	r20, 0x09	; 9
 1b2:	00 01       	movw	r0, r0
 1b4:	71 09       	sbc	r23, r1
 1b6:	05 03       	mulsu	r16, r21
 1b8:	00 36       	cpi	r16, 0x60	; 96
 1ba:	49 49       	sbci	r20, 0x99	; 153
 1bc:	49 36       	cpi	r20, 0x69	; 105
 1be:	00 06       	cpc	r0, r16
 1c0:	49 49       	sbci	r20, 0x99	; 153
 1c2:	29 1e       	adc	r2, r25
 1c4:	00 00       	nop
 1c6:	36 36       	cpi	r19, 0x66	; 102
 1c8:	00 00       	nop
 1ca:	00 00       	nop
 1cc:	56 36       	cpi	r21, 0x66	; 102
 1ce:	00 00       	nop
 1d0:	00 08       	sbc	r0, r0
 1d2:	14 22       	and	r1, r20
 1d4:	41 00       	.word	0x0041	; ????
 1d6:	00 14       	cp	r0, r0
 1d8:	14 14       	cp	r1, r4
 1da:	14 14       	cp	r1, r4
 1dc:	00 00       	nop
 1de:	41 22       	and	r4, r17
 1e0:	14 08       	sbc	r1, r4
 1e2:	00 02       	muls	r16, r16
 1e4:	01 51       	subi	r16, 0x11	; 17
 1e6:	09 06       	cpc	r0, r25
 1e8:	00 32       	cpi	r16, 0x20	; 32
 1ea:	49 59       	subi	r20, 0x99	; 153
 1ec:	51 3e       	cpi	r21, 0xE1	; 225
 1ee:	00 7c       	andi	r16, 0xC0	; 192
 1f0:	12 11       	cpse	r17, r2
 1f2:	12 7c       	andi	r17, 0xC2	; 194
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 3e       	cpi	r16, 0xE0	; 224
 1fc:	41 41       	sbci	r20, 0x11	; 17
 1fe:	41 22       	and	r4, r17
 200:	00 7f       	andi	r16, 0xF0	; 240
 202:	41 41       	sbci	r20, 0x11	; 17
 204:	22 1c       	adc	r2, r2
 206:	00 7f       	andi	r16, 0xF0	; 240
 208:	49 49       	sbci	r20, 0x99	; 153
 20a:	49 41       	sbci	r20, 0x19	; 25
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	09 09       	sbc	r16, r9
 210:	09 01       	movw	r0, r18
 212:	00 3e       	cpi	r16, 0xE0	; 224
 214:	41 49       	sbci	r20, 0x91	; 145
 216:	49 7a       	andi	r20, 0xA9	; 169
 218:	00 7f       	andi	r16, 0xF0	; 240
 21a:	08 08       	sbc	r0, r8
 21c:	08 7f       	andi	r16, 0xF8	; 248
 21e:	00 00       	nop
 220:	41 7f       	andi	r20, 0xF1	; 241
 222:	41 00       	.word	0x0041	; ????
 224:	00 20       	and	r0, r0
 226:	40 41       	sbci	r20, 0x10	; 16
 228:	3f 01       	movw	r6, r30
 22a:	00 7f       	andi	r16, 0xF0	; 240
 22c:	08 14       	cp	r0, r8
 22e:	22 41       	sbci	r18, 0x12	; 18
 230:	00 7f       	andi	r16, 0xF0	; 240
 232:	40 40       	sbci	r20, 0x00	; 0
 234:	40 40       	sbci	r20, 0x00	; 0
 236:	00 7f       	andi	r16, 0xF0	; 240
 238:	02 0c       	add	r0, r2
 23a:	02 7f       	andi	r16, 0xF2	; 242
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	04 08       	sbc	r0, r4
 240:	10 7f       	andi	r17, 0xF0	; 240
 242:	00 3e       	cpi	r16, 0xE0	; 224
 244:	41 41       	sbci	r20, 0x11	; 17
 246:	41 3e       	cpi	r20, 0xE1	; 225
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	09 09       	sbc	r16, r9
 24c:	09 06       	cpc	r0, r25
 24e:	00 3e       	cpi	r16, 0xE0	; 224
 250:	41 51       	subi	r20, 0x11	; 17
 252:	21 5e       	subi	r18, 0xE1	; 225
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	09 19       	sub	r16, r9
 258:	29 46       	sbci	r18, 0x69	; 105
 25a:	00 46       	sbci	r16, 0x60	; 96
 25c:	49 49       	sbci	r20, 0x99	; 153
 25e:	49 31       	cpi	r20, 0x19	; 25
 260:	00 01       	movw	r0, r0
 262:	01 7f       	andi	r16, 0xF1	; 241
 264:	01 01       	movw	r0, r2
 266:	00 3f       	cpi	r16, 0xF0	; 240
 268:	40 40       	sbci	r20, 0x00	; 0
 26a:	40 3f       	cpi	r20, 0xF0	; 240
 26c:	00 1f       	adc	r16, r16
 26e:	20 40       	sbci	r18, 0x00	; 0
 270:	20 1f       	adc	r18, r16
 272:	00 3f       	cpi	r16, 0xF0	; 240
 274:	40 38       	cpi	r20, 0x80	; 128
 276:	40 3f       	cpi	r20, 0xF0	; 240
 278:	00 63       	ori	r16, 0x30	; 48
 27a:	14 08       	sbc	r1, r4
 27c:	14 63       	ori	r17, 0x34	; 52
 27e:	00 07       	cpc	r16, r16
 280:	08 70       	andi	r16, 0x08	; 8
 282:	08 07       	cpc	r16, r24
 284:	00 61       	ori	r16, 0x10	; 16
 286:	51 49       	sbci	r21, 0x91	; 145
 288:	45 43       	sbci	r20, 0x35	; 53
 28a:	00 00       	nop
 28c:	7f 41       	sbci	r23, 0x1F	; 31
 28e:	41 00       	.word	0x0041	; ????
 290:	00 55       	subi	r16, 0x50	; 80
 292:	2a 55       	subi	r18, 0x5A	; 90
 294:	2a 55       	subi	r18, 0x5A	; 90
 296:	00 00       	nop
 298:	41 41       	sbci	r20, 0x11	; 17
 29a:	7f 00       	.word	0x007f	; ????
 29c:	00 04       	cpc	r0, r0
 29e:	02 01       	movw	r0, r4
 2a0:	02 04       	cpc	r0, r2
 2a2:	00 40       	sbci	r16, 0x00	; 0
 2a4:	40 40       	sbci	r20, 0x00	; 0
 2a6:	40 40       	sbci	r20, 0x00	; 0
 2a8:	00 00       	nop
 2aa:	01 02       	muls	r16, r17
 2ac:	04 00       	.word	0x0004	; ????
 2ae:	00 20       	and	r0, r0
 2b0:	54 54       	subi	r21, 0x44	; 68
 2b2:	54 78       	andi	r21, 0x84	; 132
 2b4:	00 7f       	andi	r16, 0xF0	; 240
 2b6:	48 44       	sbci	r20, 0x48	; 72
 2b8:	44 38       	cpi	r20, 0x84	; 132
 2ba:	00 38       	cpi	r16, 0x80	; 128
 2bc:	44 44       	sbci	r20, 0x44	; 68
 2be:	44 20       	and	r4, r4
 2c0:	00 38       	cpi	r16, 0x80	; 128
 2c2:	44 44       	sbci	r20, 0x44	; 68
 2c4:	48 7f       	andi	r20, 0xF8	; 248
 2c6:	00 38       	cpi	r16, 0x80	; 128
 2c8:	54 54       	subi	r21, 0x44	; 68
 2ca:	54 18       	sub	r5, r4
 2cc:	00 08       	sbc	r0, r0
 2ce:	7e 09       	sbc	r23, r14
 2d0:	01 02       	muls	r16, r17
 2d2:	00 18       	sub	r0, r0
 2d4:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2d6:	a4 7c       	andi	r26, 0xC4	; 196
 2d8:	00 7f       	andi	r16, 0xF0	; 240
 2da:	08 04       	cpc	r0, r8
 2dc:	04 78       	andi	r16, 0x84	; 132
 2de:	00 00       	nop
 2e0:	44 7d       	andi	r20, 0xD4	; 212
 2e2:	40 00       	.word	0x0040	; ????
 2e4:	00 40       	sbci	r16, 0x00	; 0
 2e6:	80 84       	ldd	r8, Z+8	; 0x08
 2e8:	7d 00       	.word	0x007d	; ????
 2ea:	00 7f       	andi	r16, 0xF0	; 240
 2ec:	10 28       	or	r1, r0
 2ee:	44 00       	.word	0x0044	; ????
 2f0:	00 00       	nop
 2f2:	41 7f       	andi	r20, 0xF1	; 241
 2f4:	40 00       	.word	0x0040	; ????
 2f6:	00 7c       	andi	r16, 0xC0	; 192
 2f8:	04 18       	sub	r0, r4
 2fa:	04 78       	andi	r16, 0x84	; 132
 2fc:	00 7c       	andi	r16, 0xC0	; 192
 2fe:	08 04       	cpc	r0, r8
 300:	04 78       	andi	r16, 0x84	; 132
 302:	00 38       	cpi	r16, 0x80	; 128
 304:	44 44       	sbci	r20, 0x44	; 68
 306:	44 38       	cpi	r20, 0x84	; 132
 308:	00 fc       	sbrc	r0, 0
 30a:	24 24       	eor	r2, r4
 30c:	24 18       	sub	r2, r4
 30e:	00 18       	sub	r0, r0
 310:	24 24       	eor	r2, r4
 312:	18 fc       	.word	0xfc18	; ????
 314:	00 7c       	andi	r16, 0xC0	; 192
 316:	08 04       	cpc	r0, r8
 318:	04 08       	sbc	r0, r4
 31a:	00 48       	sbci	r16, 0x80	; 128
 31c:	54 54       	subi	r21, 0x44	; 68
 31e:	54 20       	and	r5, r4
 320:	00 04       	cpc	r0, r0
 322:	3f 44       	sbci	r19, 0x4F	; 79
 324:	40 20       	and	r4, r0
 326:	00 3c       	cpi	r16, 0xC0	; 192
 328:	40 40       	sbci	r20, 0x00	; 0
 32a:	20 7c       	andi	r18, 0xC0	; 192
 32c:	00 1c       	adc	r0, r0
 32e:	20 40       	sbci	r18, 0x00	; 0
 330:	20 1c       	adc	r2, r0
 332:	00 3c       	cpi	r16, 0xC0	; 192
 334:	40 30       	cpi	r20, 0x00	; 0
 336:	40 3c       	cpi	r20, 0xC0	; 192
 338:	00 44       	sbci	r16, 0x40	; 64
 33a:	28 10       	cpse	r2, r8
 33c:	28 44       	sbci	r18, 0x48	; 72
 33e:	00 1c       	adc	r0, r0
 340:	a0 a0       	ldd	r10, Z+32	; 0x20
 342:	a0 7c       	andi	r26, 0xC0	; 192
 344:	00 44       	sbci	r16, 0x40	; 64
 346:	64 54       	subi	r22, 0x44	; 68
 348:	4c 44       	sbci	r20, 0x4C	; 76
 34a:	00 00       	nop
 34c:	08 77       	andi	r16, 0x78	; 120
 34e:	41 00       	.word	0x0041	; ????
 350:	00 00       	nop
 352:	00 63       	ori	r16, 0x30	; 48
 354:	00 00       	nop
 356:	00 00       	nop
 358:	41 77       	andi	r20, 0x71	; 113
 35a:	08 00       	.word	0x0008	; ????
 35c:	00 08       	sbc	r0, r0
 35e:	04 08       	sbc	r0, r4
 360:	08 04       	cpc	r0, r8
 362:	aa aa       	std	Y+50, r10	; 0x32
 364:	aa aa       	std	Y+50, r10	; 0x32
 366:	aa aa       	std	Y+50, r10	; 0x32

00000368 <ssd1306_initialization_values>:
 368:	a8 3f d3 00 40 a0 c0 da 12 81 ff a4 a6 d5 80 8d     .?..@...........
 378:	04 af d9 f1 db 20 20 00                             .....  .

00000380 <__ctors_end>:
 380:	11 24       	eor	r1, r1
 382:	1f be       	out	0x3f, r1	; 63
 384:	cf ef       	ldi	r28, 0xFF	; 255
 386:	d8 e0       	ldi	r29, 0x08	; 8
 388:	de bf       	out	0x3e, r29	; 62
 38a:	cd bf       	out	0x3d, r28	; 61

0000038c <__do_copy_data>:
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	e0 e6       	ldi	r30, 0x60	; 96
 394:	f7 e0       	ldi	r31, 0x07	; 7
 396:	02 c0       	rjmp	.+4      	; 0x39c <__do_copy_data+0x10>
 398:	05 90       	lpm	r0, Z+
 39a:	0d 92       	st	X+, r0
 39c:	a4 32       	cpi	r26, 0x24	; 36
 39e:	b1 07       	cpc	r27, r17
 3a0:	d9 f7       	brne	.-10     	; 0x398 <__do_copy_data+0xc>

000003a2 <__do_clear_bss>:
 3a2:	25 e0       	ldi	r18, 0x05	; 5
 3a4:	a4 e2       	ldi	r26, 0x24	; 36
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
 3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
 3ac:	a4 32       	cpi	r26, 0x24	; 36
 3ae:	b2 07       	cpc	r27, r18
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>
 3b2:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
 3b6:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

000003ba <__bad_interrupt>:
 3ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003be <i2cSet>:

uint8_t i2cReadLastByte(){
	TWCR= ((1<< TWINT) | (1<< TWEN));	//Disable ACK. Creates a NACK condition which signals the slave to stop sending data.
	while(!(TWCR & (1<< TWINT)));
	return TWDR;	//If ack is sent, return data.
}
 3be:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3c2:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3cc:	08 95       	ret

000003ce <i2cDelayedStart>:
 3ce:	94 ea       	ldi	r25, 0xA4	; 164
 3d0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3d8:	97 ff       	sbrs	r25, 7
 3da:	fc cf       	rjmp	.-8      	; 0x3d4 <i2cDelayedStart+0x6>
 3dc:	61 11       	cpse	r22, r1
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <i2cDelayedStart+0x2e>
 3e0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3e4:	98 7f       	andi	r25, 0xF8	; 248
 3e6:	98 30       	cpi	r25, 0x08	; 8
 3e8:	59 f0       	breq	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ea:	84 e9       	ldi	r24, 0x94	; 148
 3ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f4:	84 fd       	sbrc	r24, 4
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <i2cDelayedStart+0x22>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
 3fc:	61 30       	cpi	r22, 0x01	; 1
 3fe:	f9 f0       	breq	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 400:	88 0f       	add	r24, r24
 402:	86 2b       	or	r24, r22
 404:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 40e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 412:	87 ff       	sbrs	r24, 7
 414:	fc cf       	rjmp	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	61 11       	cpse	r22, r1
 418:	0e c0       	rjmp	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 41e:	88 7f       	andi	r24, 0xF8	; 248
 420:	88 31       	cpi	r24, 0x18	; 24
 422:	59 f0       	breq	.+22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 424:	84 e9       	ldi	r24, 0x94	; 148
 426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 42a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 42e:	84 fd       	sbrc	r24, 4
 430:	fc cf       	rjmp	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	08 95       	ret
 436:	61 30       	cpi	r22, 0x01	; 1
 438:	81 f0       	breq	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 442:	98 7f       	andi	r25, 0xF8	; 248
 444:	90 31       	cpi	r25, 0x10	; 16
 446:	e1 f2       	breq	.-72     	; 0x400 <__LOCK_REGION_LENGTH__>
 448:	84 e9       	ldi	r24, 0x94	; 148
 44a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 44e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 452:	84 fd       	sbrc	r24, 4
 454:	fc cf       	rjmp	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	08 95       	ret
 45a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 45e:	88 7f       	andi	r24, 0xF8	; 248
 460:	80 34       	cpi	r24, 0x40	; 64
 462:	59 f3       	breq	.-42     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 464:	84 e9       	ldi	r24, 0x94	; 148
 466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 46a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 46e:	84 fd       	sbrc	r24, 4
 470:	fc cf       	rjmp	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	df cf       	rjmp	.-66     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

00000474 <i2cWrite>:
 474:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 478:	84 e8       	ldi	r24, 0x84	; 132
 47a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 47e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 482:	87 ff       	sbrs	r24, 7
 484:	fc cf       	rjmp	.-8      	; 0x47e <i2cWrite+0xa>
 486:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 48a:	88 7f       	andi	r24, 0xF8	; 248
 48c:	88 32       	cpi	r24, 0x28	; 40
 48e:	49 f0       	breq	.+18     	; 0x4a2 <i2cWrite+0x2e>
 490:	84 e9       	ldi	r24, 0x94	; 148
 492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 496:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 49a:	84 fd       	sbrc	r24, 4
 49c:	fc cf       	rjmp	.-8      	; 0x496 <i2cWrite+0x22>
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	08 95       	ret
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	08 95       	ret

000004a6 <i2cStop>:

void i2cStop(){
	//Sends the stop signal on the I2C bus.
	TWCR= ((1<< TWINT) | (1<< TWSTO) | (1<< TWEN));	//Set the stop bit.
 4a6:	84 e9       	ldi	r24, 0x94	; 148
 4a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(TWCR & (1<< TWSTO));	//Wait for TWSTO to be cleared automatically.
 4ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4b0:	84 fd       	sbrc	r24, 4
 4b2:	fc cf       	rjmp	.-8      	; 0x4ac <i2cStop+0x6>
}
 4b4:	08 95       	ret

000004b6 <testHelloWorld>:
void testHelloWorld(){
	/*
	Print hello world.
	Uses the local frame buffer.
	*/
	ssd1306ClearDisplay();
 4b6:	0e 94 86 02 	call	0x50c	; 0x50c <ssd1306ClearDisplay>
	ssd1306Print("Hello world! How are you?", 0, 0);	//The null character is automatically appended.
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <ssd1306Print>
	ssd1306TransferBuffer();
 4c6:	0c 94 c1 02 	jmp	0x582	; 0x582 <ssd1306TransferBuffer>

000004ca <main>:
//Display the incremented number on the display.
void testCounter();

int main(void)
{
	i2cSet(I2C_PRESCALER, I2C_BAUD_RATE);
 4ca:	68 e4       	ldi	r22, 0x48	; 72
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 df 01 	call	0x3be	; 0x3be <i2cSet>
	ssd1306Initialize();
 4d2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ssd1306Initialize>
	testHelloWorld();
 4d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <testHelloWorld>
	
    while (1) 
    {
		
    }
 4da:	ff cf       	rjmp	.-2      	; 0x4da <main+0x10>

000004dc <ssd1306Initialize>:
	Uses the local frame buffer.
	*/
	uint16_t buffer_pointer= 0;			//GDDRAM location pointer.
	uint8_t characters_per_line= 0;
	
	for(uint8_t character= 32; character< 127; character++){
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	8c e3       	ldi	r24, 0x3C	; 60
 4e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2cDelayedStart>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 4ee:	c8 e6       	ldi	r28, 0x68	; 104
 4f0:	d3 e0       	ldi	r29, 0x03	; 3
 4f2:	fe 01       	movw	r30, r28
 4f4:	84 91       	lpm	r24, Z
 4f6:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	f3 e0       	ldi	r31, 0x03	; 3
 4fe:	c0 38       	cpi	r28, 0x80	; 128
 500:	df 07       	cpc	r29, r31
 502:	b9 f7       	brne	.-18     	; 0x4f2 <ssd1306Initialize+0x16>
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <i2cStop>

0000050c <ssd1306ClearDisplay>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	94 e0       	ldi	r25, 0x04	; 4
 514:	e4 e2       	ldi	r30, 0x24	; 36
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	df 01       	movw	r26, r30
 51a:	9c 01       	movw	r18, r24
 51c:	1d 92       	st	X+, r1
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	30 40       	sbci	r19, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <ssd1306ClearDisplay+0x10>
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	8c e3       	ldi	r24, 0x3C	; 60
 528:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2cDelayedStart>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 532:	81 e2       	ldi	r24, 0x21	; 33
 534:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 53e:	8f e7       	ldi	r24, 0x7F	; 127
 540:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 544:	82 e2       	ldi	r24, 0x22	; 34
 546:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 550:	8f e3       	ldi	r24, 0x3F	; 63
 552:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 556:	0e 94 53 02 	call	0x4a6	; 0x4a6 <i2cStop>
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	8c e3       	ldi	r24, 0x3C	; 60
 55e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2cDelayedStart>
 562:	80 e4       	ldi	r24, 0x40	; 64
 564:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 568:	c4 e2       	ldi	r28, 0x24	; 36
 56a:	d1 e0       	ldi	r29, 0x01	; 1
 56c:	89 91       	ld	r24, Y+
 56e:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 572:	35 e0       	ldi	r19, 0x05	; 5
 574:	c4 32       	cpi	r28, 0x24	; 36
 576:	d3 07       	cpc	r29, r19
 578:	c9 f7       	brne	.-14     	; 0x56c <ssd1306ClearDisplay+0x60>
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <i2cStop>

00000582 <ssd1306TransferBuffer>:
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	8c e3       	ldi	r24, 0x3C	; 60
 58a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2cDelayedStart>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 594:	81 e2       	ldi	r24, 0x21	; 33
 596:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5a0:	8f e7       	ldi	r24, 0x7F	; 127
 5a2:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5a6:	82 e2       	ldi	r24, 0x22	; 34
 5a8:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5b2:	8f e3       	ldi	r24, 0x3F	; 63
 5b4:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <i2cStop>
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	8c e3       	ldi	r24, 0x3C	; 60
 5c0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2cDelayedStart>
 5c4:	80 e4       	ldi	r24, 0x40	; 64
 5c6:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5ca:	c4 e2       	ldi	r28, 0x24	; 36
 5cc:	d1 e0       	ldi	r29, 0x01	; 1
 5ce:	89 91       	ld	r24, Y+
 5d0:	0e 94 3a 02 	call	0x474	; 0x474 <i2cWrite>
 5d4:	85 e0       	ldi	r24, 0x05	; 5
 5d6:	c4 32       	cpi	r28, 0x24	; 36
 5d8:	d8 07       	cpc	r29, r24
 5da:	c9 f7       	brne	.-14     	; 0x5ce <ssd1306TransferBuffer+0x4c>
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <i2cStop>

000005e4 <ssd1306Print>:
				characters_per_line= 0;
			}
	}
}

uint8_t ssd1306Print(char *string, uint8_t x, uint8_t y){
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
	uint16_t buffer_pointer= 0;		//GDDRAM location pointer.
	uint8_t characters_per_line= 0;
	uint16_t array_size= 0;
	uint8_t ascii_value= 0;
	
	if(x> (SSD1306_WIDTH- 1) || x< 0 || y> (SSD1306_HEIGHT- 1) || y< 0){
 5ec:	67 fd       	sbrc	r22, 7
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <ssd1306Print+0x10>
 5f0:	40 34       	cpi	r20, 0x40	; 64
 5f2:	30 f0       	brcs	.+12     	; 0x600 <ssd1306Print+0x1c>
		return SSD1306_COORDINATE_OUT_OF_RANGE;		//Deal with out of range pixel coordinates.
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
			buffer_pointer+= 2;
			characters_per_line= 0;
		}
	}
	return SSD1306_SUCCESS;
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	08 95       	ret
	uint8_t ascii_value= 0;
	
	if(x> (SSD1306_WIDTH- 1) || x< 0 || y> (SSD1306_HEIGHT- 1) || y< 0){
		return SSD1306_COORDINATE_OUT_OF_RANGE;		//Deal with out of range pixel coordinates.
	}
	y< 8 ? (y= 0) : (y= y/8);		//Deal with divide by zero.
 600:	48 30       	cpi	r20, 0x08	; 8
 602:	08 f4       	brcc	.+2      	; 0x606 <ssd1306Print+0x22>
 604:	a8 c0       	rjmp	.+336    	; 0x756 <ssd1306Print+0x172>
 606:	46 95       	lsr	r20
 608:	46 95       	lsr	r20
 60a:	46 95       	lsr	r20
 60c:	4f 5f       	subi	r20, 0xFF	; 255
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	41 50       	subi	r20, 0x01	; 1
 612:	51 09       	sbc	r21, r1
 614:	56 95       	lsr	r21
 616:	54 2f       	mov	r21, r20
 618:	44 27       	eor	r20, r20
 61a:	57 95       	ror	r21
 61c:	47 95       	ror	r20
	y+= 1; 
	x_div= x/6;				//Round off x axis to 6 pages to prevent display edge overflow. 
 61e:	2b ea       	ldi	r18, 0xAB	; 171
 620:	62 9f       	mul	r22, r18
 622:	61 2d       	mov	r22, r1
 624:	11 24       	eor	r1, r1
 626:	66 95       	lsr	r22
 628:	66 95       	lsr	r22
	x= x_div* 6;
 62a:	26 2f       	mov	r18, r22
 62c:	22 0f       	add	r18, r18
 62e:	62 0f       	add	r22, r18
 630:	66 0f       	add	r22, r22
	
	buffer_pointer= ((y* 128)- 128)+ x;		//Map the coordinates with the array index.
 632:	46 0f       	add	r20, r22
 634:	51 1d       	adc	r21, r1
	
	while((ascii_value= *(string+ array_size))!= 0x00){
 636:	fc 01       	movw	r30, r24
 638:	20 81       	ld	r18, Z
 63a:	22 23       	and	r18, r18
 63c:	09 f4       	brne	.+2      	; 0x640 <ssd1306Print+0x5c>
 63e:	85 c0       	rjmp	.+266    	; 0x74a <ssd1306Print+0x166>
 640:	fc 01       	movw	r30, r24
 642:	31 96       	adiw	r30, 0x01	; 1
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
		array_size++;
 648:	6f 5f       	subi	r22, 0xFF	; 255
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
	x_div= x/6;				//Round off x axis to 6 pages to prevent display edge overflow. 
	x= x_div* 6;
	
	buffer_pointer= ((y* 128)- 128)+ x;		//Map the coordinates with the array index.
	
	while((ascii_value= *(string+ array_size))!= 0x00){
 64c:	21 91       	ld	r18, Z+
 64e:	21 11       	cpse	r18, r1
 650:	fb cf       	rjmp	.-10     	; 0x648 <ssd1306Print+0x64>
		array_size++;
	}
	
	for(uint8_t character_count= 0; character_count< array_size; character_count++){
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	09 f4       	brne	.+2      	; 0x65a <ssd1306Print+0x76>
 658:	78 c0       	rjmp	.+240    	; 0x74a <ssd1306Print+0x166>
 65a:	c0 e0       	ldi	r28, 0x00	; 0
 65c:	d0 e0       	ldi	r29, 0x00	; 0
 65e:	00 e0       	ldi	r16, 0x00	; 0
 660:	10 e0       	ldi	r17, 0x00	; 0
 662:	09 c0       	rjmp	.+18     	; 0x676 <ssd1306Print+0x92>
		for(uint8_t page= 0; page< 6; page++){
			ssd1306_gddram_buffer[buffer_pointer] = pgm_read_byte(&(ssd1306_font[(uint8_t)*(string+ character_count)][page]));
			buffer_pointer++;
 664:	4a 5f       	subi	r20, 0xFA	; 250
 666:	5f 4f       	sbci	r21, 0xFF	; 255
	
	while((ascii_value= *(string+ array_size))!= 0x00){
		array_size++;
	}
	
	for(uint8_t character_count= 0; character_count< array_size; character_count++){
 668:	0f 5f       	subi	r16, 0xFF	; 255
 66a:	c0 2f       	mov	r28, r16
 66c:	d0 e0       	ldi	r29, 0x00	; 0
 66e:	c6 17       	cp	r28, r22
 670:	d7 07       	cpc	r29, r23
 672:	08 f0       	brcs	.+2      	; 0x676 <ssd1306Print+0x92>
 674:	6a c0       	rjmp	.+212    	; 0x74a <ssd1306Print+0x166>
		for(uint8_t page= 0; page< 6; page++){
			ssd1306_gddram_buffer[buffer_pointer] = pgm_read_byte(&(ssd1306_font[(uint8_t)*(string+ character_count)][page]));
 676:	c8 0f       	add	r28, r24
 678:	d9 1f       	adc	r29, r25
 67a:	28 81       	ld	r18, Y
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f9 01       	movw	r30, r18
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	e2 0f       	add	r30, r18
 686:	f3 1f       	adc	r31, r19
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e8 59       	subi	r30, 0x98	; 152
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	e4 91       	lpm	r30, Z
 692:	da 01       	movw	r26, r20
 694:	ac 5d       	subi	r26, 0xDC	; 220
 696:	be 4f       	sbci	r27, 0xFE	; 254
 698:	ec 93       	st	X, r30
 69a:	28 81       	ld	r18, Y
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	e2 0f       	add	r30, r18
 6a6:	f3 1f       	adc	r31, r19
 6a8:	ee 0f       	add	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	e7 59       	subi	r30, 0x97	; 151
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	e4 91       	lpm	r30, Z
 6b2:	11 96       	adiw	r26, 0x01	; 1
 6b4:	ec 93       	st	X, r30
 6b6:	11 97       	sbiw	r26, 0x01	; 1
 6b8:	28 81       	ld	r18, Y
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	f9 01       	movw	r30, r18
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	e2 0f       	add	r30, r18
 6c4:	f3 1f       	adc	r31, r19
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e6 59       	subi	r30, 0x96	; 150
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	e4 91       	lpm	r30, Z
 6d0:	12 96       	adiw	r26, 0x02	; 2
 6d2:	ec 93       	st	X, r30
 6d4:	12 97       	sbiw	r26, 0x02	; 2
 6d6:	28 81       	ld	r18, Y
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	f9 01       	movw	r30, r18
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	e2 0f       	add	r30, r18
 6e2:	f3 1f       	adc	r31, r19
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	e5 59       	subi	r30, 0x95	; 149
 6ea:	ff 4f       	sbci	r31, 0xFF	; 255
 6ec:	e4 91       	lpm	r30, Z
 6ee:	13 96       	adiw	r26, 0x03	; 3
 6f0:	ec 93       	st	X, r30
 6f2:	13 97       	sbiw	r26, 0x03	; 3
 6f4:	28 81       	ld	r18, Y
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	f9 01       	movw	r30, r18
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	e2 0f       	add	r30, r18
 700:	f3 1f       	adc	r31, r19
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	e4 59       	subi	r30, 0x94	; 148
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	e4 91       	lpm	r30, Z
 70c:	14 96       	adiw	r26, 0x04	; 4
 70e:	ec 93       	st	X, r30
 710:	14 97       	sbiw	r26, 0x04	; 4
 712:	28 81       	ld	r18, Y
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	f9 01       	movw	r30, r18
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	e2 0f       	add	r30, r18
 71e:	f3 1f       	adc	r31, r19
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	e3 59       	subi	r30, 0x93	; 147
 726:	ff 4f       	sbci	r31, 0xFF	; 255
 728:	e4 91       	lpm	r30, Z
 72a:	15 96       	adiw	r26, 0x05	; 5
 72c:	ec 93       	st	X, r30
			buffer_pointer++;
		}
		characters_per_line++;
 72e:	1f 5f       	subi	r17, 0xFF	; 255
		if(characters_per_line== 21){	//Handle horizontal overflow***************** Complete.
 730:	15 31       	cpi	r17, 0x15	; 21
 732:	09 f0       	breq	.+2      	; 0x736 <ssd1306Print+0x152>
 734:	97 cf       	rjmp	.-210    	; 0x664 <ssd1306Print+0x80>
			buffer_pointer+= 2;
 736:	48 5f       	subi	r20, 0xF8	; 248
 738:	5f 4f       	sbci	r21, 0xFF	; 255
			characters_per_line= 0;
 73a:	10 e0       	ldi	r17, 0x00	; 0
	
	while((ascii_value= *(string+ array_size))!= 0x00){
		array_size++;
	}
	
	for(uint8_t character_count= 0; character_count< array_size; character_count++){
 73c:	0f 5f       	subi	r16, 0xFF	; 255
 73e:	c0 2f       	mov	r28, r16
 740:	d0 e0       	ldi	r29, 0x00	; 0
 742:	c6 17       	cp	r28, r22
 744:	d7 07       	cpc	r29, r23
 746:	08 f4       	brcc	.+2      	; 0x74a <ssd1306Print+0x166>
 748:	96 cf       	rjmp	.-212    	; 0x676 <ssd1306Print+0x92>
		if(characters_per_line== 21){	//Handle horizontal overflow***************** Complete.
			buffer_pointer+= 2;
			characters_per_line= 0;
		}
	}
	return SSD1306_SUCCESS;
 74a:	81 e0       	ldi	r24, 0x01	; 1
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	61 cf       	rjmp	.-318    	; 0x61e <ssd1306Print+0x3a>

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
