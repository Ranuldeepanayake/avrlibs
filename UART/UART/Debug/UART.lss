
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ea  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "uart.h"

int main(){
	char *temp= "";

	uart_set(UART_BAUD_RATE(9600), 8, UART_PARITY_NONE, UART_STOP_BITS_1);
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	68 e0       	ldi	r22, 0x08	; 8
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 70 00 	call	0xe0	; 0xe0 <uart_set>
	DDRB|= 0x20;
  a4:	25 9a       	sbi	0x04, 5	; 4
	
	while(1){
		uart_println("Hello world!");
		while(uart_available()){
			*temp= uart_read_char();
			PORTB^= 0x20; 
  a6:	c0 e2       	ldi	r28, 0x20	; 32

	uart_set(UART_BAUD_RATE(9600), 8, UART_PARITY_NONE, UART_STOP_BITS_1);
	DDRB|= 0x20;
	
	while(1){
		uart_println("Hello world!");
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	91 e0       	ldi	r25, 0x01	; 1
		while(uart_available()){
			*temp= uart_read_char();
			PORTB^= 0x20; 
			uart_println(temp);
  ac:	0e 94 9d 00 	call	0x13a	; 0x13a <uart_println>
	uart_set(UART_BAUD_RATE(9600), 8, UART_PARITY_NONE, UART_STOP_BITS_1);
	DDRB|= 0x20;
	
	while(1){
		uart_println("Hello world!");
		while(uart_available()){
  b0:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_available>
  b4:	88 23       	and	r24, r24
  b6:	51 f0       	breq	.+20     	; 0xcc <main+0x36>
			*temp= uart_read_char();
  b8:	0e 94 b2 00 	call	0x164	; 0x164 <uart_read_char>
  bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_start+0xc>
			PORTB^= 0x20; 
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8c 27       	eor	r24, r28
  c4:	85 b9       	out	0x05, r24	; 5
			uart_println(temp);
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	f0 cf       	rjmp	.-32     	; 0xac <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	9c e0       	ldi	r25, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x46>
  dc:	00 00       	nop
  de:	e4 cf       	rjmp	.-56     	; 0xa8 <main+0x12>

000000e0 <uart_set>:
*/
char uart_read_char_wait(){
	//Waits till a character is received in a while loop.
	while(!(UCSR0A & UART_RX_COMPLETE)); //Check the status of RXC0.
	return UDR0;
}
  e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ee:	24 2b       	or	r18, r20
  f0:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  f4:	66 30       	cpi	r22, 0x06	; 6
  f6:	61 f0       	breq	.+24     	; 0x110 <uart_set+0x30>
  f8:	18 f4       	brcc	.+6      	; 0x100 <uart_set+0x20>
  fa:	65 30       	cpi	r22, 0x05	; 5
  fc:	31 f0       	breq	.+12     	; 0x10a <uart_set+0x2a>
  fe:	08 95       	ret
 100:	67 30       	cpi	r22, 0x07	; 7
 102:	51 f0       	breq	.+20     	; 0x118 <uart_set+0x38>
 104:	68 30       	cpi	r22, 0x08	; 8
 106:	61 f0       	breq	.+24     	; 0x120 <uart_set+0x40>
 108:	08 95       	ret
 10a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10e:	0b c0       	rjmp	.+22     	; 0x126 <uart_set+0x46>
 110:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 114:	82 60       	ori	r24, 0x02	; 2
 116:	07 c0       	rjmp	.+14     	; 0x126 <uart_set+0x46>
 118:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	03 c0       	rjmp	.+6      	; 0x126 <uart_set+0x46>
 120:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 124:	86 60       	ori	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 12a:	08 95       	ret

0000012c <uart_send_char>:
 12c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <uart_send_char>
 134:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 138:	08 95       	ret

0000013a <uart_println>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24
 140:	89 91       	ld	r24, Y+
 142:	88 23       	and	r24, r24
 144:	19 f0       	breq	.+6      	; 0x14c <uart_println+0x12>
 146:	0e 94 96 00 	call	0x12c	; 0x12c <uart_send_char>
 14a:	fa cf       	rjmp	.-12     	; 0x140 <uart_println+0x6>
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	0e 94 96 00 	call	0x12c	; 0x12c <uart_send_char>
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	0c 94 96 00 	jmp	0x12c	; 0x12c <uart_send_char>

0000015c <uart_available>:

/*
Checks whether an unread character is in the RX buffer.
*/
uint8_t uart_available(){
	return (UCSR0A & UART_RX_COMPLETE);
 15c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
 160:	80 78       	andi	r24, 0x80	; 128
 162:	08 95       	ret

00000164 <uart_read_char>:

/*
Returns a single char received on the RX buffer. Used in conjunction with 'uart_available()'.
*/
uint8_t uart_read_char(){
	return UDR0;
 164:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
